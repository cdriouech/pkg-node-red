resources:
- repo: self
trigger:
  branches:
    include:
    - '*'
variables:
  NODERED_VERSION: '0.20.6'
jobs:
- job: LinuxARMv7
  pool:
    vmImage: 'ubuntu-16.04'
  workspace:
    clean: 'all'
  variables:
    IMAGE: 'node@sha256:68cbc06164bb8866a809ceb4e112c3632e60a2606ba9b12ceb469219949363d9'
    TARGET: 'node10-linux-armv7'
    ARCH: 'armv7'
    OUTPUT_DIR: $(Build.ArtifactStagingDirectory)
  steps:
    - script: |
        docker run --rm --privileged hypriot/qemu-register
      displayName: 'Prepare cross build'
    - script: |
        docker run --rm \
          -v `pwd`:/app \
          -v $OUTPUT_DIR:$OUTPUT_DIR \
          -e NODERED_VERSION=${NODERED_VERSION} \
          -e TARGET=${TARGET} \
          -e OUTPUT_DIR=${OUTPUT_DIR} \
          -w /app \
          "${IMAGE}" bash ./build.sh
      displayName: 'Build & Pack'
    - script: |
        docker run --rm \
          -v `pwd`:/app \
          -v $OUTPUT_DIR:$OUTPUT_DIR \
          -e NODERED_VERSION=${NODERED_VERSION} \
          -e TARGET=${TARGET} \
          -e OUTPUT_DIR=${OUTPUT_DIR} \
          -w /app \
          "${IMAGE}" bash ./tp-userprog.sh
      displayName: 'Create ThingsPro User Program'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'LinuxARMv7'
        targetPath: $(Build.ArtifactStagingDirectory)

- job: LinuxAMD64
  pool:
    vmImage: 'ubuntu-16.04'
  workspace:
    clean: 'all'
  variables:
    IMAGE: 'node:lts'
    TARGET: 'node10-linux-x64'
    ARCH: 'x64'
    OUTPUT_DIR: $(Build.ArtifactStagingDirectory)
  steps:
    - script: |
        docker run --rm \
          -v `pwd`:/app \
          -v $OUTPUT_DIR:$OUTPUT_DIR \
          -e NODERED_VERSION=${NODERED_VERSION} \
          -e TARGET=${TARGET} \
          -e OUTPUT_DIR=${OUTPUT_DIR} \
          -w /app \
          "${IMAGE}" bash ./build.sh
      displayName: 'Build & Pack'
    - script: |
        docker run --rm \
          -v `pwd`:/app \
          -v $OUTPUT_DIR:$OUTPUT_DIR \
          -e NODERED_VERSION=${NODERED_VERSION} \
          -e TARGET=${TARGET} \
          -e OUTPUT_DIR=${OUTPUT_DIR} \
          -w /app \
          "${IMAGE}" bash ./tp-userprog.sh
      displayName: 'Create ThingsPro User Program'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'LinuxAMD64'
        targetPath: $(Build.ArtifactStagingDirectory)

- job: macOS
  pool:
    vmImage: 'macOS-10.14'
  workspace:
    clean: 'all'
  steps:
    - task: NodeTool@0
      displayName: Node install
      inputs:
        versionSpec: '10.x'
    - script: |
        node -v
        bash ./build.sh
      displayName: 'Build & Pack'
      env:
        IMAGE: 'node:lts'
        TARGET: 'node10-macos-x64'
        OUTPUT_DIR: $(Build.ArtifactStagingDirectory)
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'macOS'
        targetPath: $(Build.ArtifactStagingDirectory)

- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  workspace:
    clean: 'all'
  steps:
    - script: |
        node -v
        bash ./build.sh
      displayName: 'Build & Pack'
      env:
        IMAGE: 'node:lts'
        TARGET: 'node10-win-x64'
        OUTPUT_DIR: $(Build.ArtifactStagingDirectory)
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'Windows'
        targetPath: $(Build.ArtifactStagingDirectory)
